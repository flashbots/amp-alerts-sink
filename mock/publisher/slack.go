// Code generated by MockGen. DO NOT EDIT.
// Source: slack.go
//
// Generated by this command:
//
//	mockgen -package mock_publisher -destination ../mock/publisher/slack.go -source slack.go -mock_names slackApi=Mock_slackApi slackApi
//

// Package mock_publisher is a generated GoMock package.
package mock_publisher

import (
	reflect "reflect"

	slack "github.com/slack-go/slack"
	gomock "go.uber.org/mock/gomock"
)

// Mock_slackApi is a mock of slackApi interface.
type Mock_slackApi struct {
	ctrl     *gomock.Controller
	recorder *Mock_slackApiMockRecorder
	isgomock struct{}
}

// Mock_slackApiMockRecorder is the mock recorder for Mock_slackApi.
type Mock_slackApiMockRecorder struct {
	mock *Mock_slackApi
}

// NewMock_slackApi creates a new mock instance.
func NewMock_slackApi(ctrl *gomock.Controller) *Mock_slackApi {
	mock := &Mock_slackApi{ctrl: ctrl}
	mock.recorder = &Mock_slackApiMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *Mock_slackApi) EXPECT() *Mock_slackApiMockRecorder {
	return m.recorder
}

// AddReaction mocks base method.
func (m *Mock_slackApi) AddReaction(name string, item slack.ItemRef) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddReaction", name, item)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddReaction indicates an expected call of AddReaction.
func (mr *Mock_slackApiMockRecorder) AddReaction(name, item any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddReaction", reflect.TypeOf((*Mock_slackApi)(nil).AddReaction), name, item)
}

// PostMessage mocks base method.
func (m *Mock_slackApi) PostMessage(channelID string, options ...slack.MsgOption) (string, string, error) {
	m.ctrl.T.Helper()
	varargs := []any{channelID}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PostMessage", varargs...)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// PostMessage indicates an expected call of PostMessage.
func (mr *Mock_slackApiMockRecorder) PostMessage(channelID any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{channelID}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PostMessage", reflect.TypeOf((*Mock_slackApi)(nil).PostMessage), varargs...)
}

// RemoveReaction mocks base method.
func (m *Mock_slackApi) RemoveReaction(name string, item slack.ItemRef) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveReaction", name, item)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveReaction indicates an expected call of RemoveReaction.
func (mr *Mock_slackApiMockRecorder) RemoveReaction(name, item any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveReaction", reflect.TypeOf((*Mock_slackApi)(nil).RemoveReaction), name, item)
}
